<!DOCTYPE html>
<html>

<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>vHackOS - vTC Efficiency Calculator</title>
<h1>vHackOS - vTC Efficient Upgrade Calculator</h1>

<p>This page will calculate the best point to boost to before applying NC to achieve maximum efficiency in terms of vTC cost</p>

<form onsubmit="return UpgradeArrays.process();" class="form">
	Current upgrade time using no boosters:<br>
	Days - <input type ="number" id="days" min="0" size="10"><br>
	Hours - <input type="number" id="hours" min="0"><br>
	Minutes - <input type="number" id="minutes" min="0"><br>
	Seconds - <input type="number" id="seconds" min="0"><br>
	<input type="submit" value="Submit">
</form>

<p>Number of seconds: <output id="totalSeconds"></output></p>

<p>You should use <output id="useBoosters">?</output> boosters<br>
	and finish off with <output id="useNC">?</output> NC<br>
	The total cost of doing so is <output id="totalCost">?</output> vTC</p>

<p>Assumptions:<br>
	You have VIP.<br>
	You are filling tasks completely.<br>
	You are purchasing boosters and NC in the greatest quantities possible.</p>

<p>Note:<br>
	By default the calculator compares information for completing upgrades below 3 minutes (72 NC).<br>
	It is always more efficient to boost to below 2 or 1 minutes if possible.<br>
	If you want to run the calculator with boosts at change the parameter below.</p>

<p>Max boost below <input type="number" id="maxBoostMinutes" value="3"> minutes</p>


<script>

	window.onload = function() {
		Input._maxBoostMinutes = 3;
		UpgradeArrays.initialize();
	};

	//initialize

	UpgradeArrays = function() {
		throw new Error('This is a static class');
	};

	UpgradeArrays.initialize = function() {
			this.setupArrays()
	};

	UpgradeArrays.setupArrays = function() {
		var mins = Input._maxBoostMinutes;
		this._array = [null];
		for (var i = 1; i <= mins; i++) {
			this._array.push(this.createArray(i));
		}
	};

	UpgradeArrays.createArray = function(arrayId) {
		var boostTime = arrayId * 60 - 1;
		var boostCost = 6000/5600;
		var ncCost = 8000/154000;
		var array = [];
		for (var i = 0; i <= 20; i++) {
			array[i] = {};
			array[i].memberOf = arrayId; //number of minutes to boost below
			array[i].boostNo = i; //number of boosters
			array[i].ncNo = arrayId * 24; //number of NC
			array[i].boostCost = boostCost * i; //vTC cost of boosters
			array[i].ncCost = ncCost * arrayId * 24; //vTC cost of NC
			array[i].totalCost = array[i].ncCost + array[i].boostCost; //total vTC cost
			array[i].maxTime = boostTime/0.6 ** i; //maximum base upgrade time this setup can be run until
		}
		return array;
	};

	UpgradeArrays.array = function(arrayId) {
		return this._array[arrayId];
	};

	//process

	UpgradeArrays.process = function() {
		Input.getInput()
		this.assignBestElement();
		var cheapest = this.findCheapestElement();
		Output.displayResults(cheapest);
		return false;
	};

	UpgradeArrays.findCheapestElement = function() { //called from process
		var array = this._bestElement;
		var cost = 999;
		var cheapest;
		for (var i = 0; i < array.length; i++) {
			if (array[i]) {
				var temp = array[i].totalCost;
				if (temp < cost) {
					cost = temp;
					cheapest = array[i];
				}
			}
		}
		return cheapest;
	};

	UpgradeArrays.assignBestElement = function() { //called from process
		var time = Input.time();
		this._bestElement = [];
		for (var i = 1; i < this._array.length; i++) {
			var array = this.array(i);
			this._bestElement.push(this.findBestElement(array, time));
		}
	};

	UpgradeArrays.findBestElement = function(array, time) { //called from assignBestElement
		var bestElement;
		for (var i = 0; i <= 20; i++) {
			if (this.isElementAcceptable(array[i], time)) {
				bestElement = array[i];
				break;
			}
		}
		return bestElement;
	};

	UpgradeArrays.isElementAcceptable = function(element, time) { //called from findBestElement
		var maxTime = element.maxTime;
		return maxTime >= time;
	};

	Input = function() {
		throw new Error('This is a static class');
	};

	Input.getInput = function() {
		Input._days = Number(document.getElementById("days").value);
		Input._hours = Number(document.getElementById("hours").value);
		Input._minutes = Number(document.getElementById("minutes").value);
		Input._seconds = Number(document.getElementById("seconds").value);
		if (Input._maxBoostMinutes !== Number(document.getElementById("maxBoostMinutes").value)) {
			Input._maxBoostMinutes = Number(document.getElementById("maxBoostMinutes").value);
			UpgradeArrays.initialize();
		}
	}

	Input.time = function() { //called from assignBestElement
		var time = this._days;
		time *= 24; //days to hours
		time += this._hours;
		time *= 60; //hours to minutes
		time += this._minutes;
		time *= 60; //minutes to seconds
		time += this._seconds;
		document.getElementById("totalSeconds").value = time;
		return time;
	};

	Output = function() {
		throw new Error('This is a static class');
	};

	Output.displayResults = function(cheapest) {
		if (cheapest) {
			document.getElementById("useBoosters").value = cheapest.boostNo;
			document.getElementById("useNC").value = cheapest.ncNo;
			document.getElementById("totalCost").value = cheapest.totalCost;
		} else {
			document.getElementById("useBoosters").value = 20;
			document.getElementById("useNC").value = 'Unknown (Time too long)';
			document.getElementById("totalCost").value = 'Unknown (Time too long)';
		}
	}


</script>



</body>
</html>